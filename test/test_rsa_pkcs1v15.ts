import path = require("path");
import { expect, assert } from 'chai';
const circom_tester = require('circom_tester');
const wasm_tester = circom_tester.wasm;

// TODO: Factor this out into some common code among all the tests
const F1Field = require("ffjavascript").F1Field;
const Scalar = require("ffjavascript").Scalar;
exports.p = Scalar.fromString("21888242871839275222246405745257275088548364400416034343698204186575808495617");
const Fr = new F1Field(exports.p);

function bigint_to_array(n: number, k: number, x: bigint) {
    let mod: bigint = 1n;
    for (var idx = 0; idx < n; idx++) {
        mod = mod * 2n;
    }

    let ret: bigint[] = [];
    var x_temp: bigint = x;
    for (var idx = 0; idx < k; idx++) {
        ret.push(x_temp % mod);
        x_temp = x_temp / mod;
    }
    return ret;
}


describe("Test rsa pkcs1v15 n = 64, k = 32", function () {
    this.timeout(1000 * 1000);

    // runs circom compilation
    let circuit: any;
    before(async function () {
        //original:
        //circuit = await wasm_tester(path.join(__dirname, "circuits", "rsa_verify_pkcs1v15.circom"));
        //By Tiago:
        circuit = await wasm_tester(path.join(__dirname, "circuits", "simple_rsa_verify_pkcs1v15.circom"));
    });

    // a, e, m, (a ** e) % m
    let test_cases: Array<[bigint, bigint, bigint, bigint]> = [];
    //These are the old values from the original author
    //let m = BigInt("27333278531038650284292446400685983964543820405055158402397263907659995327446166369388984969315774410223081038389734916442552953312548988147687296936649645550823280957757266695625382122565413076484125874545818286099364801140117875853249691189224238587206753225612046406534868213180954324992542640955526040556053150097561640564120642863954208763490114707326811013163227280580130702236406906684353048490731840275232065153721031968704703853746667518350717957685569289022049487955447803273805415754478723962939325870164033644600353029240991739641247820015852898600430315191986948597672794286676575642204004244219381500407");
    //let exp = BigInt(65537);
    //let sign = BigInt("27166015521685750287064830171899789431519297967327068200526003963687696216659347317736779094212876326032375924944649760206771585778103092909024744594654706678288864890801000499430246054971129440518072676833029702477408973737931913964693831642228421821166326489172152903376352031367604507095742732994611253344812562891520292463788291973539285729019102238815435155266782647328690908245946607690372534644849495733662205697837732960032720813567898672483741410294744324300408404611458008868294953357660121510817012895745326996024006347446775298357303082471522757091056219893320485806442481065207020262668955919408138704593");
    // hashed data. decimal
    //let hashed = BigInt("83814198383102558219731078260892729932246618004265700685467928187377105751529");

    //test wrong hash or wrong m - fails as supposed!:
    //let hashed = BigInt("83814198383102558219731078260892729932246618004265700685467928187377105751274");
    //let m = BigInt("26877283975388232002065546470999785257065668437121277626422898829468295994425002534123931915945559617344634299463672464881786335501998933229817362492919530719356197980244178171682568314630456704843964235701169272840827403226569155673809960150900311743961237789646475480998560495177043349952420160197708953986181525637253074713500260384690148853022580356324720561179472725807442763843755515338818629917380201208369993837646911190634717770914200111131983791094934970474752204714209363619762523501868989404033152536987791077018610508510651331541408664242381532359216354015898457615549908800129418374861154322861098417303");


    //these are the new values for testing, by me Tiago Morais
    let m = BigInt("26877283975388232002065546470999785257065668437121277626422898829468295994425002534123931915945559617344634299463672464881786335501998933229817362492919530719356197980244178171682568314630456704843964235701169272840827403226569155673809960150900311743961237789646475480998560495177043349952420160197708953986181525637253074713500260384690148853022580356324720561179472725807442763843755515338818629917380201208369993837646911190634717770914200111131983791094934970474752204714209363619762523501868989404033152536987791077018610508510651331541408664242381532359216354015898457615549908800129418374861154322861098417303");
    let exp = BigInt(65537);
    let sign = BigInt("19970770434011356420695616570275995588733851736092916486111712132583641231522399849078260379017479208895803667652431366593883985802635999227638120171560060271785507252576191070096993051229216860066470378690422171938259912306738962186526007146103769150108002059810205462974903424990722607936274237920270872702180029184401091695395600924057276873789754646380608203609851792334985336197032772780502144607311769527475415342699750160560754943907331155361187938339206488970924682929057116994252391614878690800996605435792148903886765163146205141249146933886278846746712104071544235211937440019023711390224571884634365863432");
    // hashed data. decimal
    let hashed = BigInt("72155939486846849509759369733266486982821795810448245423168957390607644363272");



    test_cases.push([exp, sign, m, hashed]);

    let test_rsa_verify = function (x: [bigint, bigint, bigint, bigint]) {
        const [exp, sign, m, hashed] = x;

        let exp_array: bigint[] = bigint_to_array(64, 32, exp);
        let sign_array: bigint[] = bigint_to_array(64, 32, sign);
        let m_array: bigint[] = bigint_to_array(64, 32, m);
        let hashed_array: bigint[] = bigint_to_array(64, 4, hashed);

        /*
        console.log("exp"+exp_array);
        console.log("sign"+sign_array);
        console.log("modulus"+m_array);
        console.log("hashed"+hashed_array);
        */

        it('Testing ', async function () {
            let witness = await circuit.calculateWitness({
                "exp": exp_array,
                "sign": sign_array,
                "modulus": m_array,
                "hashed": hashed_array
            });

            await circuit.checkConstraints(witness);
        });
    }

    test_cases.forEach(test_rsa_verify);
});